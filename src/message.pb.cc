// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* requestMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  requestMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* replyMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  replyMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  requestMsg_descriptor_ = file->message_type(0);
  static const int requestMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(requestMsg, regstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(requestMsg, targetstr_),
  };
  requestMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      requestMsg_descriptor_,
      requestMsg::default_instance_,
      requestMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(requestMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(requestMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(requestMsg));
  replyMsg_descriptor_ = file->message_type(1);
  static const int replyMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replyMsg, result_),
  };
  replyMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      replyMsg_descriptor_,
      replyMsg::default_instance_,
      replyMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replyMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replyMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(replyMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    requestMsg_descriptor_, &requestMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    replyMsg_descriptor_, &replyMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete requestMsg::default_instance_;
  delete requestMsg_reflection_;
  delete replyMsg::default_instance_;
  delete replyMsg_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\"/\n\nrequestMsg\022\016\n\006regStr\030"
    "\001 \002(\t\022\021\n\ttargetStr\030\002 \002(\t\"\032\n\010replyMsg\022\016\n\006"
    "result\030\001 \002(\005", 92);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  requestMsg::default_instance_ = new requestMsg();
  replyMsg::default_instance_ = new replyMsg();
  requestMsg::default_instance_->InitAsDefaultInstance();
  replyMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int requestMsg::kRegStrFieldNumber;
const int requestMsg::kTargetStrFieldNumber;
#endif  // !_MSC_VER

requestMsg::requestMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:requestMsg)
}

void requestMsg::InitAsDefaultInstance() {
}

requestMsg::requestMsg(const requestMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:requestMsg)
}

void requestMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  regstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

requestMsg::~requestMsg() {
  // @@protoc_insertion_point(destructor:requestMsg)
  SharedDtor();
}

void requestMsg::SharedDtor() {
  if (regstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete regstr_;
  }
  if (targetstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete targetstr_;
  }
  if (this != default_instance_) {
  }
}

void requestMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* requestMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return requestMsg_descriptor_;
}

const requestMsg& requestMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

requestMsg* requestMsg::default_instance_ = NULL;

requestMsg* requestMsg::New() const {
  return new requestMsg;
}

void requestMsg::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_regstr()) {
      if (regstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        regstr_->clear();
      }
    }
    if (has_targetstr()) {
      if (targetstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        targetstr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool requestMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:requestMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string regStr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regstr().data(), this->regstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "regstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_targetStr;
        break;
      }

      // required string targetStr = 2;
      case 2: {
        if (tag == 18) {
         parse_targetStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->targetstr().data(), this->targetstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "targetstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:requestMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:requestMsg)
  return false;
#undef DO_
}

void requestMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:requestMsg)
  // required string regStr = 1;
  if (has_regstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regstr().data(), this->regstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "regstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->regstr(), output);
  }

  // required string targetStr = 2;
  if (has_targetstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetstr().data(), this->targetstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->targetstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:requestMsg)
}

::google::protobuf::uint8* requestMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:requestMsg)
  // required string regStr = 1;
  if (has_regstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regstr().data(), this->regstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "regstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->regstr(), target);
  }

  // required string targetStr = 2;
  if (has_targetstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetstr().data(), this->targetstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->targetstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:requestMsg)
  return target;
}

int requestMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string regStr = 1;
    if (has_regstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regstr());
    }

    // required string targetStr = 2;
    if (has_targetstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetstr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void requestMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const requestMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const requestMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void requestMsg::MergeFrom(const requestMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_regstr()) {
      set_regstr(from.regstr());
    }
    if (from.has_targetstr()) {
      set_targetstr(from.targetstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void requestMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void requestMsg::CopyFrom(const requestMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool requestMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void requestMsg::Swap(requestMsg* other) {
  if (other != this) {
    std::swap(regstr_, other->regstr_);
    std::swap(targetstr_, other->targetstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata requestMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = requestMsg_descriptor_;
  metadata.reflection = requestMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int replyMsg::kResultFieldNumber;
#endif  // !_MSC_VER

replyMsg::replyMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:replyMsg)
}

void replyMsg::InitAsDefaultInstance() {
}

replyMsg::replyMsg(const replyMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:replyMsg)
}

void replyMsg::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

replyMsg::~replyMsg() {
  // @@protoc_insertion_point(destructor:replyMsg)
  SharedDtor();
}

void replyMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void replyMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* replyMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return replyMsg_descriptor_;
}

const replyMsg& replyMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

replyMsg* replyMsg::default_instance_ = NULL;

replyMsg* replyMsg::New() const {
  return new replyMsg;
}

void replyMsg::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool replyMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:replyMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:replyMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:replyMsg)
  return false;
#undef DO_
}

void replyMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:replyMsg)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:replyMsg)
}

::google::protobuf::uint8* replyMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:replyMsg)
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replyMsg)
  return target;
}

int replyMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void replyMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const replyMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const replyMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void replyMsg::MergeFrom(const replyMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void replyMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void replyMsg::CopyFrom(const replyMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool replyMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void replyMsg::Swap(replyMsg* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata replyMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = replyMsg_descriptor_;
  metadata.reflection = replyMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
